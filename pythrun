#!/usr/bin/env python3

# source: https://github.com/BrassTack/pythrun

# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org/>

import os
import sys
import venv
import subprocess
import ast
import importlib.util
import json
import hashlib
import time
import argparse
import shutil
import pkgutil

CACHE_FILE_NAME = 'imports_cache.json'
METADATA_FILE_NAME = 'metadata.json'

# Log function for general (verbose) output
def log(message):
    if not QUIET_MODE:
        print(message, flush=True)

# Log function for critical output (always shown)
def log_always(message):
    print(message, flush=True)

def get_venv_path(script_path, dependency_source, requirements_file=None):
    base_venv_dir = os.getenv('PYTHRUN_VENVS_DIR', os.path.expanduser('~/.pythrun_venvs'))

    if dependency_source == 'requirements' and requirements_file:
        # Use the requirements file path for hashing
        # For general requirements.txt, share the virtual environment
        # Hash the absolute path to the requirements file
        requirements_path = os.path.abspath(requirements_file)
        hashed_req_path = hashlib.md5(requirements_path.encode()).hexdigest()
        venv_name = f"req_{hashed_req_path}"
    else:
        # For script-specific requirements or parsed imports, use the script path
        hashed_script_path = hashlib.md5(script_path.encode()).hexdigest()
        venv_name = f"script_{hashed_script_path}"

    return os.path.join(base_venv_dir, venv_name)

def create_metadata_file(venv_path, script_path):
    metadata = {
        'script_path': script_path,
        'created_at': time.strftime('%Y-%m-%d %H:%M:%S')
    }
    metadata_file = os.path.join(venv_path, METADATA_FILE_NAME)
    with open(metadata_file, 'w') as f:
        json.dump(metadata, f)

def load_cached_dependencies(cache_file):
    if not os.path.exists(cache_file):
        return set(), None

    with open(cache_file, 'r') as f:
        cache_data = json.load(f)
    cached_dependencies = set(cache_data.get('dependencies', []))
    dependency_source = cache_data.get('dependency_source', 'imports')
    return cached_dependencies, dependency_source

def save_cached_dependencies(cache_file, dependencies, dependency_source):
    cache_data = {
        'dependencies': list(dependencies),
        'dependency_source': dependency_source
    }
    with open(cache_file, 'w') as f:
        json.dump(cache_data, f)

def parse_imports(file_path):
    try:
        with open(file_path, 'r') as file:
            tree = ast.parse(file.read())
    except SyntaxError as e:
        log_always(f"SyntaxError in file {file_path}: {e}")
        log_always(f"Line in file with error: {e.text.strip()}\n{' ' * (e.offset - 1)}^")
        sys.exit(1)

    imports = set()
    for node in ast.walk(tree):
        if isinstance(node, ast.Import):
            for alias in node.names:
                imports.add(alias.name.split('.')[0])
        elif isinstance(node, ast.ImportFrom):
            if node.module:
                imports.add(node.module.split('.')[0])

    return imports

def create_venv(venv_path, system_site_packages=True):
    venv.create(venv_path, with_pip=True, system_site_packages=system_site_packages)

def is_module_available(python_executable, module_name):
    try:
        subprocess.run([python_executable, '-c', f'import {module_name}'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        return True
    except subprocess.CalledProcessError:
        return False

def is_builtin_module(module_name):
    return module_name in sys.builtin_module_names or pkgutil.find_loader(module_name) is None

def install_dependencies(venv_path, dependencies):
    pip_path = os.path.join(venv_path, 'bin', 'pip')
    python_path = os.path.join(venv_path, 'bin', 'python')
    failed_installs = []
    for dep in dependencies:
        dep_mapping = {
            'yaml': 'pyyaml',
        }
        dep = dep_mapping.get(dep, dep)
        if not is_module_available(python_path, dep):
            try:
                subprocess.run([pip_path, 'install', dep], check=True, capture_output=True, text=True)
                log_always(f"Successfully installed {dep}")
            except subprocess.CalledProcessError as e:
                log_always(f"Failed to install {dep}. Error: {e.stderr.strip()}")
                failed_installs.append(dep)
        else:
            log(f"Module {dep} is already available in the virtual environment. Skipping installation.")

    return failed_installs

def run_script(venv_path, script_path, args):
    python_path = os.path.join(venv_path, 'bin', 'python')
    full_command = [python_path, '-u', script_path] + args
    log(f"pythrun: Starting execution of {script_path}")
    log_always(f"pythrun: Full command: {' '.join(full_command)}")

    try:
        log_always("--- Begin output ---")

        process = subprocess.run(full_command, stderr=subprocess.STDOUT)

        log_always("--- End output ---")

        log(f"pythrun: Script {script_path} completed. Exit code: {process.returncode}")
        if process.returncode != 0:
            log_always(f"pythrun: Warning: Script exited with non-zero status. Exit code: {process.returncode}")
        return process.returncode
    except KeyboardInterrupt:
        log_always("\npythrun: Script execution interrupted by user.")
        return 1
    except Exception as e:
        log_always(f"pythrun: An unexpected error occurred: {e}")
        return 1

def load_requirements(requirements_file):
    with open(requirements_file, 'r') as f:
        return set(line.strip() for line in f if line.strip() and not line.startswith('#'))

def main():
    global QUIET_MODE

    parser = argparse.ArgumentParser(description="Run Python scripts with virtualenv and dependency management.")
    parser.add_argument('script', help="Path to the Python script to run")
    parser.add_argument('script_args', nargs=argparse.REMAINDER, help="Arguments to pass to the script")
    parser.add_argument('-q', '--quiet', action='store_true', help="Suppress non-active output")
    parser.add_argument('--no-system-packages', action='store_true', help="Do not include system site packages in the virtual environment")

    args = parser.parse_args()
    QUIET_MODE = args.quiet

    # Resolve the real script path in case it's a symlink
    script_path = os.path.realpath(os.path.abspath(args.script))
    script_args = args.script_args

    script_dir = os.path.dirname(script_path)
    script_base = os.path.basename(script_path)
    script_name, _ = os.path.splitext(script_base)
    file_requirements = os.path.join(script_dir, f"{script_name}.requirements.txt")
    general_requirements = os.path.join(script_dir, "requirements.txt")

    # Determine current dependency source and dependencies
    if os.path.exists(file_requirements):
        log(f"pythrun: Using script-specific requirements file: {file_requirements}")
        requirements_file = file_requirements
        dependencies = load_requirements(file_requirements)
        dependency_source = 'requirements'
    elif os.path.exists(general_requirements):
        log(f"pythrun: Using general requirements file: {general_requirements}")
        requirements_file = general_requirements
        dependencies = load_requirements(general_requirements)
        dependency_source = 'requirements'
    else:
        log("pythrun: No requirements file found. Parsing imports from script.")
        requirements_file = None
        dependencies = parse_imports(script_path)
        dependency_source = 'imports'

    # Get virtual environment path based on dependency source
    venv_path = get_venv_path(script_path, dependency_source, requirements_file)
    cache_file = os.path.join(venv_path, CACHE_FILE_NAME)

    # Load cached dependencies and dependency source
    cached_dependencies, cached_dependency_source = load_cached_dependencies(cache_file)

    # Check if dependency source has changed
    if cached_dependency_source != dependency_source:
        if os.path.exists(venv_path):
            log_always("pythrun: Dependency source has changed. Recreating virtual environment.")
            shutil.rmtree(venv_path)
        log_always(f"Creating virtual environment at {venv_path}")
        create_venv(venv_path, system_site_packages=not args.no_system_packages)
        create_metadata_file(venv_path, script_path)
        # Force installation of dependencies
        dependencies_changed = True
    else:
        # Check if dependencies have changed
        dependencies_changed = dependencies != cached_dependencies
        if dependencies_changed and dependency_source == 'requirements':
            log_always("pythrun: Requirements file has changed. Reinstalling dependencies.")

    if not os.path.exists(venv_path):
        log_always(f"Creating virtual environment at {venv_path}")
        create_venv(venv_path, system_site_packages=not args.no_system_packages)
        create_metadata_file(venv_path, script_path)

    python_path = os.path.join(venv_path, 'bin', 'python')

    if dependencies_changed:
        if dependency_source == 'requirements':
            # Install dependencies from requirements file
            failed_installs = install_dependencies(venv_path, dependencies)
            if failed_installs:
                log_always(f"Failed to install the following packages: {', '.join(failed_installs)}")
                log_always("The script may not run correctly.")
                user_input = input("Do you want to continue anyway? (y/n): ").lower()
                if user_input != 'y':
                    log_always("Aborting script execution.")
                    sys.exit(1)
        else:
            # If using imports and dependencies have changed
            log_always("pythrun: Detected new or changed imports. Installing dependencies...")
            failed_installs = install_dependencies(venv_path, dependencies)
            if failed_installs:
                log_always(f"Failed to install the following packages: {', '.join(failed_installs)}")
                log_always("The script may not run correctly.")
                user_input = input("Do you want to continue anyway? (y/n): ").lower()
                if user_input != 'y':
                    log_always("Aborting script execution.")
                    sys.exit(1)
        # Save the updated dependencies and dependency source to cache
        save_cached_dependencies(cache_file, dependencies, dependency_source)
    else:
        log("pythrun: No changes in dependencies detected. Skipping dependency installation.")

    # Check for missing dependencies when using requirements
    if dependency_source == 'requirements':
        # Parse imports to check for missing dependencies
        current_imports = parse_imports(script_path)
        missing_dependencies = set()
        for module_name in current_imports:
            if is_builtin_module(module_name):
                continue  # Skip built-in modules
            if not is_module_available(python_path, module_name):
                missing_dependencies.add(module_name)
        if missing_dependencies:
            log_always(f"pythrun: The following modules are not available in the virtual environment: {', '.join(missing_dependencies)}")
            log_always("pythrun: They may be missing from the requirements file(s) or failed to install.")
            sys.exit(1)

    log("pythrun: Dependency installation complete. Running the script...")
    exit_code = run_script(venv_path, script_path, script_args)
    sys.exit(exit_code)

if __name__ == "__main__":
    main()
